#!/bin/bash

# WebPortal Health Check Script
# –ü—Ä–æ–≤–µ—Ä—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –≤—Å–∏—á–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏

LOG_FILE="logs/health_check.log"
DATE=$(date '+%Y-%m-%d %H:%M:%S')

# –¶–≤–µ—Ç–æ–≤–µ –∑–∞ output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ª–æ–≥–≤–∞–Ω–µ
log_message() {
    echo "[$DATE] $1" >> $LOG_FILE
    echo -e "$1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ web —Å—ä—Ä–≤—ä—Ä–∞
check_web_server() {
    echo -n "üåê Web Server: "
    if curl -f -s http://localhost:5001/health > /dev/null 2>&1; then
        echo -e "${GREEN}OK${NC}"
        log_message "Web server: OK"
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        log_message "Web server: FAIL"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
check_database() {
    echo -n "üóÑÔ∏è  Database: "
    if pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
        echo -e "${GREEN}OK${NC}"
        log_message "Database: OK"
        return 0
    else
        echo -e "${RED}FAIL${NC}"
        log_message "Database: FAIL"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–æ–≤–æ—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
check_disk_space() {
    echo -n "üíæ Disk Space: "
    DISK_USAGE=$(df /opt | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [ $DISK_USAGE -lt 80 ]; then
        echo -e "${GREEN}OK (${DISK_USAGE}%)${NC}"
        log_message "Disk space: OK (${DISK_USAGE}%)"
        return 0
    elif [ $DISK_USAGE -lt 90 ]; then
        echo -e "${YELLOW}WARNING (${DISK_USAGE}%)${NC}"
        log_message "Disk space: WARNING (${DISK_USAGE}%)"
        return 1
    else
        echo -e "${RED}CRITICAL (${DISK_USAGE}%)${NC}"
        log_message "Disk space: CRITICAL (${DISK_USAGE}%)"
        return 2
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞
check_memory() {
    echo -n "üß† Memory: "
    MEM_USAGE=$(free | awk 'FNR==2{printf "%.0f", $3/($3+$4)*100}')
    
    if [ $MEM_USAGE -lt 80 ]; then
        echo -e "${GREEN}OK (${MEM_USAGE}%)${NC}"
        log_message "Memory: OK (${MEM_USAGE}%)"
        return 0
    elif [ $MEM_USAGE -lt 90 ]; then
        echo -e "${YELLOW}WARNING (${MEM_USAGE}%)${NC}"
        log_message "Memory: WARNING (${MEM_USAGE}%)"
        return 1
    else
        echo -e "${RED}CRITICAL (${MEM_USAGE}%)${NC}"
        log_message "Memory: CRITICAL (${MEM_USAGE}%)"
        return 2
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å–∏—Ç–µ
check_processes() {
    echo -n "‚öôÔ∏è  Processes: "
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Gunicorn –ø—Ä–æ—Ü–µ—Å–∏
    GUNICORN_COUNT=$(pgrep -f "gunicorn.*webportal" | wc -l)
    
    if [ $GUNICORN_COUNT -gt 0 ]; then
        echo -e "${GREEN}OK (${GUNICORN_COUNT} workers)${NC}"
        log_message "Processes: OK (${GUNICORN_COUNT} workers)"
        return 0
    else
        echo -e "${RED}FAIL (No workers running)${NC}"
        log_message "Processes: FAIL (No workers running)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ—Ç–µ –∑–∞ –≥—Ä–µ—à–∫–∏
check_logs() {
    echo -n "üìã Recent Errors: "
    
    ERROR_COUNT=0
    if [ -f "logs/webportal.log" ]; then
        ERROR_COUNT=$(tail -100 logs/webportal.log | grep -c "ERROR" 2>/dev/null || echo 0)
    fi
    
    if [ $ERROR_COUNT -eq 0 ]; then
        echo -e "${GREEN}OK (No recent errors)${NC}"
        log_message "Recent errors: OK (No recent errors)"
        return 0
    elif [ $ERROR_COUNT -lt 5 ]; then
        echo -e "${YELLOW}WARNING (${ERROR_COUNT} errors)${NC}"
        log_message "Recent errors: WARNING (${ERROR_COUNT} errors)"
        return 1
    else
        echo -e "${RED}CRITICAL (${ERROR_COUNT} errors)${NC}"
        log_message "Recent errors: CRITICAL (${ERROR_COUNT} errors)"
        return 2
    fi
}

# –ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üîç WebPortal Health Check - $(date)"
    echo "=" * 40
    
    TOTAL_CHECKS=6
    FAILED_CHECKS=0
    WARNING_CHECKS=0
    
    # –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_web_server || ((FAILED_CHECKS++))
    check_database || ((FAILED_CHECKS++))
    
    check_disk_space
    case $? in
        1) ((WARNING_CHECKS++)) ;;
        2) ((FAILED_CHECKS++)) ;;
    esac
    
    check_memory
    case $? in
        1) ((WARNING_CHECKS++)) ;;
        2) ((FAILED_CHECKS++)) ;;
    esac
    
    check_processes || ((FAILED_CHECKS++))
    
    check_logs
    case $? in
        1) ((WARNING_CHECKS++)) ;;
        2) ((FAILED_CHECKS++)) ;;
    esac
    
    echo
    echo "üìä Summary:"
    echo "   ‚úÖ Passed: $((TOTAL_CHECKS - FAILED_CHECKS - WARNING_CHECKS))"
    echo "   ‚ö†Ô∏è  Warnings: $WARNING_CHECKS"
    echo "   ‚ùå Failed: $FAILED_CHECKS"
    
    # –û–±—â–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
    if [ $FAILED_CHECKS -eq 0 ] && [ $WARNING_CHECKS -eq 0 ]; then
        echo -e "\nüü¢ Overall Status: ${GREEN}HEALTHY${NC}"
        exit 0
    elif [ $FAILED_CHECKS -eq 0 ]; then
        echo -e "\nüü° Overall Status: ${YELLOW}WARNING${NC}"
        exit 1
    else
        echo -e "\nüî¥ Overall Status: ${RED}CRITICAL${NC}"
        exit 2
    fi
}

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ logs –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
mkdir -p logs

# –ò–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞
main "$@"