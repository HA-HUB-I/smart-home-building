#!/bin/bash

# WebPortal Backup Script
# –ü—Ä–∞–≤–∏ –ø—ä–ª–µ–Ω backup –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –∏ –≤–∞–∂–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
BACKUP_DIR="$PROJECT_DIR/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# –¶–≤–µ—Ç–æ–≤–µ
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_NAME="webportal"
DB_USER="webportal_user"
RETENTION_DAYS=30

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ª–æ–≥–≤–∞–Ω–µ
log() {
    echo -e "[$DATE] $1"
}

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
mkdir -p "$BACKUP_DIR"

log "${GREEN}üóÑÔ∏è  Starting WebPortal Backup${NC}"
log "Backup directory: $BACKUP_DIR"

# Database backup
log "${YELLOW}üìä Backing up database...${NC}"
DB_BACKUP_FILE="$BACKUP_DIR/db_backup_$DATE.sql.gz"

if pg_dump -U "$DB_USER" -h localhost "$DB_NAME" | gzip > "$DB_BACKUP_FILE"; then
    DB_SIZE=$(du -h "$DB_BACKUP_FILE" | cut -f1)
    log "${GREEN}‚úÖ Database backup completed: $DB_SIZE${NC}"
else
    log "${RED}‚ùå Database backup failed!${NC}"
    exit 1
fi

# Files backup
log "${YELLOW}üìÅ Backing up files...${NC}"
FILES_BACKUP_FILE="$BACKUP_DIR/files_backup_$DATE.tar.gz"

tar -czf "$FILES_BACKUP_FILE" \
    -C "$PROJECT_DIR" \
    --exclude="venv" \
    --exclude="__pycache__" \
    --exclude=".git" \
    --exclude="backups" \
    --exclude="logs/*.log" \
    uploads \
    .env \
    static/uploads 2>/dev/null

if [ $? -eq 0 ]; then
    FILES_SIZE=$(du -h "$FILES_BACKUP_FILE" | cut -f1)
    log "${GREEN}‚úÖ Files backup completed: $FILES_SIZE${NC}"
else
    log "${RED}‚ùå Files backup failed!${NC}"
    exit 1
fi

# Configuration backup
log "${YELLOW}‚öôÔ∏è  Backing up configuration...${NC}"
CONFIG_BACKUP_FILE="$BACKUP_DIR/config_backup_$DATE.tar.gz"

tar -czf "$CONFIG_BACKUP_FILE" \
    -C "$PROJECT_DIR" \
    .env \
    config.py \
    gunicorn.conf.py \
    requirements*.txt 2>/dev/null

if [ $? -eq 0 ]; then
    CONFIG_SIZE=$(du -h "$CONFIG_BACKUP_FILE" | cut -f1)
    log "${GREEN}‚úÖ Configuration backup completed: $CONFIG_SIZE${NC}"
else
    log "${RED}‚ùå Configuration backup failed!${NC}"
fi

# Cleanup old backups
log "${YELLOW}üßπ Cleaning up old backups...${NC}"
DELETED_COUNT=0

# Database backups
for file in "$BACKUP_DIR"/db_backup_*.sql.gz; do
    if [ -f "$file" ] && [ "$(find "$file" -mtime +$RETENTION_DAYS)" ]; then
        rm "$file"
        ((DELETED_COUNT++))
    fi
done

# Files backups
for file in "$BACKUP_DIR"/files_backup_*.tar.gz; do
    if [ -f "$file" ] && [ "$(find "$file" -mtime +$RETENTION_DAYS)" ]; then
        rm "$file"
        ((DELETED_COUNT++))
    fi
done

# Config backups
for file in "$BACKUP_DIR"/config_backup_*.tar.gz; do
    if [ -f "$file" ] && [ "$(find "$file" -mtime +$RETENTION_DAYS)" ]; then
        rm "$file"
        ((DELETED_COUNT++))
    fi
done

if [ $DELETED_COUNT -gt 0 ]; then
    log "${GREEN}‚úÖ Cleaned up $DELETED_COUNT old backup files${NC}"
else
    log "${GREEN}‚ÑπÔ∏è  No old backups to clean up${NC}"
fi

# Backup summary
log "${GREEN}üìã Backup Summary:${NC}"
log "   Database: $DB_BACKUP_FILE ($DB_SIZE)"
log "   Files: $FILES_BACKUP_FILE ($FILES_SIZE)"
log "   Config: $CONFIG_BACKUP_FILE ($CONFIG_SIZE)"

TOTAL_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
log "   Total backup size: $TOTAL_SIZE"

log "${GREEN}üéâ Backup completed successfully!${NC}"