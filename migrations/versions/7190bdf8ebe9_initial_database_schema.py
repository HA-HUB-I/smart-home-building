"""Initial database schema

Revision ID: 7190bdf8ebe9
Revises: 
Create Date: 2025-10-16 11:54:41.868112

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7190bdf8ebe9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_notifications_created_at'))
        batch_op.drop_index(batch_op.f('idx_notifications_is_read'))
        batch_op.drop_index(batch_op.f('idx_notifications_user_id'))

    op.drop_table('notifications')
    with op.batch_alter_table('system_settings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_system_settings_key'))
        batch_op.drop_index(batch_op.f('idx_system_settings_public'))

    op.drop_table('system_settings')
    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_user_profiles_user_id'))

    op.drop_table('user_profiles')
    with op.batch_alter_table('session_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_session_logs_login_time'))
        batch_op.drop_index(batch_op.f('idx_session_logs_session_id'))
        batch_op.drop_index(batch_op.f('idx_session_logs_user_id'))

    op.drop_table('session_logs')
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_activity_logs_action'))
        batch_op.drop_index(batch_op.f('idx_activity_logs_timestamp'))
        batch_op.drop_index(batch_op.f('idx_activity_logs_user_id'))

    op.drop_table('activity_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('email', sa.String(length=120), nullable=True))
        batch_op.add_column(sa.Column('is_superuser', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('first_name', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('last_name', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('login_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('global_role', postgresql.ENUM('SUPERADMIN', 'STAFF', 'ACCOUNTANT', 'DEVELOPER', 'RESIDENT', name='globalroleenum'), nullable=True))
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index(batch_op.f('idx_users_nfc_tag'))
        batch_op.drop_index(batch_op.f('idx_users_phone'))
        batch_op.drop_index(batch_op.f('idx_users_username'))
        batch_op.drop_constraint(batch_op.f('users_nfc_tag_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('users_phone_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('users_username_key'), type_='unique')
        batch_op.create_index('idx_user_active', ['is_active'], unique=False)
        batch_op.create_index('idx_user_email', ['email'], unique=False)
        batch_op.create_index('idx_user_global_role', ['global_role'], unique=False)
        batch_op.create_index('idx_user_phone', ['phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_phone'), ['phone'], unique=True)
        batch_op.drop_column('nfc_tag')
        batch_op.drop_column('username')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('nfc_tag', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.drop_index(batch_op.f('ix_users_phone'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index('idx_user_phone')
        batch_op.drop_index('idx_user_global_role')
        batch_op.drop_index('idx_user_email')
        batch_op.drop_index('idx_user_active')
        batch_op.create_unique_constraint(batch_op.f('users_username_key'), ['username'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('users_phone_key'), ['phone'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('users_nfc_tag_key'), ['nfc_tag'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_users_username'), ['username'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_phone'), ['phone'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_nfc_tag'), ['nfc_tag'], unique=False)
        batch_op.alter_column('updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('id',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.drop_column('global_role')
        batch_op.drop_column('login_count')
        batch_op.drop_column('last_login')
        batch_op.drop_column('settings')
        batch_op.drop_column('last_name')
        batch_op.drop_column('first_name')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('is_superuser')
        batch_op.drop_column('email')

    op.create_table('activity_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('activity_logs_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('activity_logs_pkey'))
    )
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_activity_logs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_activity_logs_timestamp'), ['timestamp'], unique=False)
        batch_op.create_index(batch_op.f('idx_activity_logs_action'), ['action'], unique=False)

    op.create_table('session_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('login_method', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('login_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('logout_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('session_logs_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('session_logs_pkey'))
    )
    with op.batch_alter_table('session_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_session_logs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_session_logs_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_session_logs_login_time'), ['login_time'], unique=False)

    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=10), server_default=sa.text("'bg'::character varying"), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), server_default=sa.text("'light'::character varying"), autoincrement=False, nullable=True),
    sa.Column('notifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('location_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_profiles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_profiles_pkey'))
    )
    with op.batch_alter_table('user_profiles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_user_profiles_user_id'), ['user_id'], unique=False)

    op.create_table('system_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('setting_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('setting_value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('system_settings_pkey')),
    sa.UniqueConstraint('setting_key', name=op.f('system_settings_setting_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('system_settings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_system_settings_public'), ['is_public'], unique=False)
        batch_op.create_index(batch_op.f('idx_system_settings_key'), ['setting_key'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_notifications_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_is_read'), ['is_read'], unique=False)
        batch_op.create_index(batch_op.f('idx_notifications_created_at'), ['created_at'], unique=False)

    # ### end Alembic commands ###
